
@model DomainProduct.Entities.Product

@*
    reference: https://developers.google.com/search/docs/data-types/product
*@

<div id="Product_@Model.IdProduct" data-id="Product_@Model.IdProduct" class="ui card produto product-in-card" data-exhausted="@Model.FlagExhausted" itemscope itemtype="http://schema.org/Product">
    <input type="hidden" id="selected-references_@Model.IdProduct" />
    <meta itemprop="productID" content="@Model.IdProduct">
    <div class="content">
        @{
            List<DomainCustomer.Entities.Wishlist.WishlistItem> wishList = null;
            bool inlist = false;
            string color = "grey";
            string textListaDesejo = "Adicionar à lista de desejos";
            string combinacoes = "";

            if (Request.Cookies["WishList"] == null)
            {
                @Html.Action("LoadWishListCookie", "Customer")
            }

            wishList = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DomainCustomer.Entities.Wishlist.WishlistItem>>(Request.Cookies["WishList"] != null ? HttpUtility.UrlDecode(Request.Cookies["WishList"].Value) : string.Empty);

            if (wishList != null)
            {
                if (Model.AvailableReferences == null || Model.AvailableReferences.Count() == 0)
                {
                    inlist = wishList.Find(p => p.IdProduct == Model.IdProduct) != null ? true : false;
                }
            }
            if (inlist)
            {
                color = "red";
                textListaDesejo = "Remover da lista de desejos";


            }
        }

        @{
            bool isb2b = Session["segment"] != null && Session["segment"].ToString() == "b2b" ? true : false;

            DomainAssistedSale.Entities.Seller _assistedSale = (DomainAssistedSale.Entities.Seller)Session["Seller"];
            bool isAssistedSale = _assistedSale != null ? true : false;


            if (!Model.HasConjunct && !isb2b && !isAssistedSale)
            {
                <div class="ui top right attached label massive wishlist">
                    <div class="bcg-heart wishlist-btn" data-wishlist-local="card" data-tooltip="@textListaDesejo" data-position="top right">
                        <i class="wishlist-item icon heart @color" data-in-list="@inlist" data-have-sku="@(Model.AvailableReferences != null && Model.AvailableReferences.Count() > 0 ? "true" : "false")" data-product-id="@Model.IdProduct"></i>
                    </div>
                </div>
            }
        }
        @if (Model.AlternativeImage != null)
        {
            <a class="ui slide masked reveal image fluid" itemprop="url" href="@(Model.UrlFriendlyCustom != null ? Model.UrlFriendlyCustom : Model.UrlFriendly)" title="@Model.Name">
                <img itemprop="image" id="mainImageCard_@Model.IdProduct" src="/assets/image/img_default.png" data-src="@(Model.ImageHome != null ? Model.ImageHome : "/assets/image/img_default.png")" class="visible content" onerror="imgError(this)" alt="@Model.Name" title="@Model.Name">
                <img src="@Model.AlternativeImage" class="hidden content" onerror="imgError(this)" alt="@Model.Name" title="@Model.Name">

                @if (Model.SealStatus != null && Model.SealStatus.Name != "Normal")
                {
                    <div class="ui bottom right attached label massive imagetag">
                        <img src="@Model.SealStatus.Image" alt="@Model.SealStatus.Name" class="ui image tiny" onerror="imgError(this)" alt="@Model.Name" title="@Model.Name">
                    </div>
                }
            </a>
        }
        else
        {
            <a class="ui image fluid" itemprop="url" href="@(Model.UrlFriendlyCustom != null ? Model.UrlFriendlyCustom : Model.UrlFriendly)" title="@Model.Name">
                <img id="mainImageCard_@Model.IdProduct" src="@(Model.ImageHome != null ? Model.ImageHome : "/assets/image/img_default.png")" class="visible content" onerror="imgError(this)" alt="@Model.Name" title="@Model.Name">
                @if (Model.SealStatus != null && Model.SealStatus.Name != "Normal")
                {
                    <div class="ui bottom right attached label massive imagetag">
                        <img src="@Model.SealStatus.Image" class="ui image tiny" onerror="imgError(this)" alt="@Model.Name" title="@Model.Name">
                    </div>
                }
            </a>
        }
        <div class="ui horizontal divider avaliacao">
            <div class="ui tiny star rating" data-rating="@Model.Rate.Value.ToString().Replace(",", ".")"></div>
        </div>

        <div class="info">

            <div class="sku-options mobile-hide tablet-hide @(Model.AvailableReferences != null ? "mask" : "") @(Session["segment"] != null && Session["segment"].ToString() == "b2b" ? "hideme" : string.Empty)">

                <span id="produto-esgotado_@Model.IdProduct" class="text center produto-esgotado-label hideme @(Model.FlagExhausted ? " " : "hideme" )">Produto Esgotado</span>

                @if (Model.AvailableReferences != null)
                {
                    <input type="hidden" name="produto-sku" id="produto-sku" value="" />
                    foreach (var reference in Model.AvailableReferences)
                    {
                        <div id="referencefromproduct_@Model.IdProduct" class="ui fluid selection dropdown dropdownreference" data-total-referencia="@(Model.AvailableReferences != null ? Model.AvailableReferences.Count() : 0)" data-idproduct="@Model.IdProduct">
                            <input type="hidden" name="reference_@Model.IdProduct" data-id-reference="@reference.IdReference" id="@reference.Name">
                            <i class="dropdown icon"></i>
                            <span class="text">@reference.Name</span>
                            <div class="menu">
                                <div class="header">
                                    @reference.Name
                                </div>
                                <div class="scrolling menu">
                                    @foreach (var variation in reference.Variations)
                                    {
                                        combinacoes = "";
                                        if (Model.SKUs != null)
                                        {
                                            foreach (var skus in Model.SKUs)
                                            {
                                                if (!LojaCorp.Control.Company._Company.ShowProductOutOfStock || (LojaCorp.Control.Company._Company.ShowProductOutOfStock && skus.Stock > 0 && (skus.Price > 0 || skus.PricePromotion > 0)))
                                                {
                                                    if (skus.Variations.Where(c => c.IdVariation == variation.IdVariation).ToArray().Count() > 0)
                                                    {
                                                        var sku = skus.Variations;
                                                        foreach (var Variacao in skus.Variations)
                                                        {
                                                            combinacoes += "|" + Variacao.IdVariation;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        if (combinacoes != "") { 
                                            <div class="item" data-value="@variation.IdVariation" data-sku="@combinacoes">
                                                @if (variation.Color != null)
                                                {
                                                    <div class="ui empty circular label" style="background-color: @LojaCorp.Control.Static.HexaToRgb(variation.Color) !important; border-color: #1B1C1D !important;"></div>
                                                }
                                                @variation.Name
                                            </div>
                                        }
                                    }
                                </div>
                            </div>
                        </div>
                        <div class="ui small divider hidden"></div>
                    }
                }
                <!-- Verificar se o produto é conjunto -->
                @if (Model.HasConjunct)
                {
                    <div class = "buttonAlign">
                    <a href="@(Model.UrlFriendlyCustom != null ? Model.UrlFriendlyCustom : Model.UrlFriendly)" title="Comprar" class="ui icon button action fluid newButton btn-comprar" data-idproduct="@Model.IdProduct" data-name="Model.Name">
                        <i id="btn-icon-card-Model.IdProduct" class="icon announcement"></i>                        
                    </a>

                    <a href="@(Model.UrlFriendlyCustom != null ? Model.UrlFriendlyCustom : Model.UrlFriendly)" class="ui icon button action fluid newButton btn-comprar" data-idproduct="@Model.IdProduct" data-name="Model.Name">
                        <i id="btn-icon-card-Model.IdProduct" class="icon heart"></i>                        
                    </a>
                    </div>
                }
                else if (Model.FlagExhausted || Model.Stock <= 0)
                {
                    <div class = "buttonAlign">
                    <a id="btn-comprar-card-@Model.IdProduct" title="Avise-me" class="ui icon button grey fluid newButton avise-card avise-me-modal" data-idproduct="@Model.IdProduct" data-name="@Model.Name">
                        <i id="btn-icon-card-@Model.IdProduct" class="icon announcement"></i>
                        Avise-me
                    </a>

                    <a href="@(Model.UrlFriendlyCustom != null ? Model.UrlFriendlyCustom : Model.UrlFriendly)" class="ui icon button action fluid newButton btn-comprar" data-idproduct="@Model.IdProduct" data-name="Model.Name">
                        <i id="btn-icon-card-Model.IdProduct" class="icon heart"></i>                        
                    </a>
                    </div>
                }
                else if (Session["EventList"] != null)
                {
                    <div class = "buttonAlign">
                    <a id="add-event-list-@Model.IdProduct" title="Adicionar à Lista" class="ui icon button primary fluid add-event-list newButton" data-idproduct="@Model.IdProduct" data-name="@Model.Name">
                        <i id="btn-icon-card-@Model.IdProduct" class="icon add to cart"></i>
                        Adicionar à Lista
                    </a>

                    <a href="@(Model.UrlFriendlyCustom != null ? Model.UrlFriendlyCustom : Model.UrlFriendly)" class="ui icon button action fluid newButton btn-comprar" data-idproduct="@Model.IdProduct" data-name="Model.Name">
                        <i id="btn-icon-card-Model.IdProduct" class="icon heart"></i>                        
                    </a>
                    </div>
                }
                else
                {
                    <div class = "buttonAlign">
                    <a id="btn-comprar-card-@Model.IdProduct" title="Comprar" class="ui icon button action fluid newButton btn-comprar-card" data-idproduct="@Model.IdProduct" data-name="@Model.Name">
                        <i id="btn-icon-card-@Model.IdProduct" class="icon add to cart"></i>                        
                    </a>

                    <a href="@(Model.UrlFriendlyCustom != null ? Model.UrlFriendlyCustom : Model.UrlFriendly)" class="ui icon button action fluid newButton btn-comprar" data-idproduct="@Model.IdProduct" data-name="Model.Name">
                        <i id="btn-icon-card-Model.IdProduct" class="icon heart"></i>                        
                    </a>
                    </div>
                }
            </div>
            <div class="dados">
                <a href="@(Model.UrlFriendlyCustom != null ? Model.UrlFriendlyCustom : Model.UrlFriendly)" title="@Model.Name">
                    <h3>
                        <span itemprop="name">
                            @Model.Name
                        </span>
                    </h3>
                </a>
                <div itemprop="offers" itemscope itemtype="http://schema.org/Offer">

                    <meta itemprop="priceCurrency" content="BRL" />
                    @if (Model.PricePromotion != null && Model.PricePromotion > 0)
                    {
                        <span id="basePrice_@Model.IdProduct" class="precoBase">de <i>@string.Format("{0:c}", Model.Price)</i> por @(Session["segment"] != null && Session["segment"].ToString() == "b2b" && Model.AvailableReferences != null ? "a partir de" : string.Empty)</span>
                        <span class="preco">R$ <span itemprop="price">@string.Format("{0:n2}", Model.PricePromotion)</span></span>

                    }
                    else
                    {
                        <span id="price_@Model.IdProduct" class="preco" itemprop="price">
                            <span class="precoBase">
                                @(Session["segment"] != null && Session["segment"].ToString() == "b2b" && Model.AvailableReferences != null ? "a partir de" : string.Empty)
                            </span>
                            R$ @string.Format("{0:n2}", Model.Price)
                        </span>
                    }
                    @if (Model.InstallmentMax != null)
                    {
                        <span class="parcelamento">
                            ou em <span class="installmentMaxNumber">@Model.InstallmentMax.MaxNumber</span>
                            x de <span class="installmentMaxValue">@string.Format("{0:c}", Model.InstallmentMax.Value)</span>
                        </span>
                    }

                    @if (Model.Stock >= 0 && !Model.FlagExhausted)
                    {
                        <br /><br />
                        <span class="text color grey regular parcelamento small">
                            @Model.DescriptionAvailabilityStatus
                        </span>
                    }

                    @if (!Model.FlagExhausted)
                    {
                        <link itemprop="availability" href="http://schema.org/InStock" content="disponível" />
                    }
                    else
                    {
                        <link itemprop="availability" href="http://schema.org/SoldOut" content="esgotado" />
                    }

                </div>
            </div>
            <div class="botoes centered">
                <!-- Verificar se o produto é conjunto -->
                @if (Model.HasConjunct)
                {
                    <a href="@(Model.UrlFriendlyCustom != null ? Model.UrlFriendlyCustom : Model.UrlFriendly)" title="Comprar" class="ui labeled icon button action fluid text uppercase btnComprar" data-idproduct="@Model.IdProduct" data-name="Model.Name">
                        <i id="btn-icon-card-Model.IdProduct" class="icon announcement"></i>
                        Comprar
                    </a>
                }
                else if (Model.FlagExhausted || Model.Stock <= 0)
                {
                    <a id="btn-comprar-card-@Model.IdProduct" title="Avise-me" class="ui labeled icon button grey fluid avise-card avise-me-modal text uppercase btnComprar" data-idproduct="@Model.IdProduct" data-name="@Model.Name">
                        <i id="btn-icon-card-@Model.IdProduct" class="icon announcement"></i>
                        Avise-me
                    </a>
                }
                else if (Session["EventList"] != null)
                {
                    <a href="@(Model.UrlFriendlyCustom != null ? Model.UrlFriendlyCustom : Model.UrlFriendly)" id="add-event-list-@Model.IdProduct" title="Adicionar à Lista" class="ui labeled icon button primary fluid text uppercase btnComprar" data-idproduct="@Model.IdProduct" data-name="@Model.Name">
                        <i id="btn-icon-card-@Model.IdProduct" class="icon add to cart"></i>
                        Adicionar à Lista
                    </a>
                }
                else
                {
                    <a href="@(Model.UrlFriendlyCustom != null ? Model.UrlFriendlyCustom : Model.UrlFriendly)" id="btn-comprar-card-@Model.IdProduct" title="Comprar" class="ui labeled icon button action fluid text uppercase btnComprar" data-idproduct="@Model.IdProduct" data-name="@Model.Name">
                        <i id="btn-icon-card-@Model.IdProduct" class="icon add to cart"></i>
                        Comprar
                    </a>
                }

                <a class="ui button btnDetalhes mobile-hide tablet-hide" href="@(Model.UrlFriendlyCustom != null ? Model.UrlFriendlyCustom : Model.UrlFriendly)">
                    <i class="icon search"></i>Detalhes
                </a>
            </div>
        </div>
    </div>
</div>